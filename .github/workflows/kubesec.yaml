name: KubeSec Scan

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  lint:
    name: Kubesec

    runs-on: ubuntu-latest

    continue-on-error: true  # DO NOT block merging

    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get all changed yaml files
        id: changed-files
        # https://github.com/marketplace/actions/changed-files?version=v46.0.5
        uses: tj-actions/changed-files@6cb76d07bee4c9772c6882c06c37837bf82a04d3 # v46.0.5
        with:
          # Avoid using single or double quotes for multiline patterns
          files: |
            **/**.yaml
            **/**.yml

      - name: Filter Kubernetes manifests
        id: manifests
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        shell: bash
        run: |
          filtered_files=()
          
          for file in $ALL_CHANGED_FILES; do
            if grep -qE '^\s*apiVersion:' "$file" && grep -qE '^\s*kind:' "$file"; then
              filtered_files+=("$file")
              any_changed="true"
            else
              echo "Skipped \`$file\` (not a Kubernetes manifest)"
            fi
          done

          # Save the filtered list to GitHub output
          echo "all_changed_files=${filtered_files[*]}" >> $GITHUB_OUTPUT
          echo "any_changed=$any_changed" >> $GITHUB_OUTPUT

      - name: Build local KubeSec image
        if: steps.manifests.outputs.any_changed == 'true'
        # mozna by raz zbudowac obraz i go uzywac np. pobierajac z artifactory?
        shell: bash
        run: |
          git clone https://github.com/controlplaneio/kubesec.git
          cd kubesec
          docker build -t kubesec:local .
          docker run -d -p 8080:8080 kubesec:local http 8080

      - name: Install jq
        if: steps.manifests.outputs.any_changed == 'true'
        shell: bash
        run: sudo apt-get install -y jq

      - name: Scan Kubernetes manifests
        continue-on-error: true
        if: steps.manifests.outputs.any_changed == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.manifests.outputs.all_changed_files }}
        shell: bash
        run: |
          echo "### 🛡️ KubeSec Results" > comment.md
          echo "" >> comment.md
          HAS_FAILURE=0

          for file in $ALL_CHANGED_FILES; do
            if ! grep -qE '^\s*apiVersion:' "$file" || ! grep -qE '^\s*kind:' "$file"; then
              echo "ℹ️ Skipped \`$file\` (not a Kubernetes manifest)"
              continue
            fi

            RESPONSE=$(curl -sSX POST --data-binary @"$file" http://localhost:8080/scan)
            MESSAGE=$(echo "$RESPONSE" | jq -r '.[0].message')
            SCORE=$(echo "$RESPONSE" | jq -r '.[0].score')

            echo "[debug] RESPONSE: $RESPONSE"

            if [[ "$SCORE" -ge 0 ]]; then
              echo "✅ \`$file\` - $MESSAGE" >> comment.md
            else
              echo "❌ \`$file\` - $MESSAGE" >> comment.md
              HAS_FAILURE=1
            fi

            echo "" >> comment.md
            echo "<details>" >> comment.md
            echo "<summary>📄 See full result</summary>" >> comment.md
            echo "<pre>" >> comment.md
            echo "$RESPONSE" | jq '.' >> comment.md
            echo "</pre>" >> comment.md
            echo "</details>" >> comment.md
            echo "" >> comment.md
            echo "---" >> comment.md

          done

          if [[ "$HAS_FAILURE" -eq 1 ]]; then
            exit 420
          fi

      - name: Comment results
        uses: mshick/add-pr-comment@v2
        if: steps.manifests.outputs.any_changed == 'true'
        with:
          message-path: comment.md

      - name: Cleanup
        if: steps.manifests.outputs.any_changed == 'true'
        shell: bash
        run: |
          echo "Cleaning up KubeSec container..."
          CONTAINER_ID=$(docker ps -q --filter ancestor=kubesec:local)
          if [ -n "$CONTAINER_ID" ]; then
            docker stop "$CONTAINER_ID"
            docker rm "$CONTAINER_ID"
          else
            echo "No KubeSec container found."
          fi

          echo "Removing temporary comment file..."
          rm -f comment.md

          echo "Removing cloned KubeSec repository..."
          rm -rf kubesec
          echo "Cleanup complete."
