name: KubeSec Scan

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
  workflow_dispatch:

jobs:
  lint:
    name: Kubesec
    runs-on: ubuntu-latest
    continue-on-error: true  # DO NOT block merging
    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build local KubeSec image
        run: |
          git clone https://github.com/controlplaneio/kubesec.git
          cd kubesec
          docker build -t kubesec:local .
          docker run -d -p 8080:8080 kubesec:local http 8080

      - name: Run KubeSec scanner
        run: |
          echo "### 🛡️ KubeSec Results for \`file.yaml\`" > comment.md

          RESPONSE=$(curl -sSX POST --data-binary @file.yaml http://localhost:8080/scan)

          MESSAGE=$(echo "$RESPONSE" | jq -r '.[0].message')
          SCORE=$(echo "$RESPONSE" | jq -r '.[0].score')

          if [[ "$SCORE" -ge 0 ]]; then
          echo "✅ **KubeSec check passed** - $MESSAGE" >> comment.md
          else
          echo "❌ **KubeSec check failed** - $MESSAGE" >> comment.md
          fi

          echo "" >> comment.md
          echo "<details>" >> comment.md
          echo "<summary>📄 See the details</summary>" >> comment.md
          echo "<pre>" >> comment.md
          echo "$RESPONSE" | jq '.' >> comment.md
          echo "</pre>" >> comment.md
          echo "</details>" >> comment.md

          # Exit with 1 if check failed
          if [[ "$SCORE" -lt 0 ]]; then
          exit 1
          fi

      - name: Comment results
        uses: mshick/add-pr-comment@v2
        if: always()
        with:
          message-path: comment.md

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up KubeSec container..."
          CONTAINER_ID=$(docker ps -q --filter ancestor=kubesec:local)
          if [ -n "$CONTAINER_ID" ]; then
            docker stop "$CONTAINER_ID"
            docker rm "$CONTAINER_ID"
          else
            echo "No KubeSec container found."
          fi
          echo "Cleanup complete."

          rm -f comment.md

          rm -rf kubesec
